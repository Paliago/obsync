/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";var l=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var h=Object.prototype.hasOwnProperty;var g=(c,i)=>{for(var e in i)l(c,e,{get:i[e],enumerable:!0})},p=(c,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let n of u(i))!h.call(c,n)&&n!==e&&l(c,n,{get:()=>i[n],enumerable:!(t=d(i,n))||t.enumerable});return c};var m=c=>p(l({},"__esModule",{value:!0}),c);var w={};g(w,{default:()=>a});module.exports=m(w);var s=require("obsidian"),f={username:"",password:"",apiUrl:"",websocketUrl:""},a=class extends s.Plugin{constructor(){super(...arguments);this.ws=null;this.isConnecting=!1;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectTimeout=null;this.fileWatchingEnabled=!0;this.lastModifiedTimes=new Map;this.debounceTimeouts=new Map}async onload(){await this.loadSettings(),this.statusBarItem=this.addStatusBarItem(),this.updateStatusBar("Disconnected","disconnected"),this.settings.websocketUrl&&this.connectWebSocket(),this.registerEvent(this.app.vault.on("modify",e=>{this.fileWatchingEnabled&&e instanceof s.TFile&&e.extension==="md"&&this.debounceFileSync(e)})),this.addCommand({id:"sync-upload-active-file",name:"Sync: Upload active file to cloud",checkCallback:e=>{let t=this.app.workspace.getActiveFile();return t&&t.extension==="md"?(e||this.uploadActiveFile(),!0):!1}}),this.addCommand({id:"sync-download-active-file",name:"Sync: Download active file from cloud",checkCallback:e=>{let t=this.app.workspace.getActiveFile();return t&&t.extension==="md"?(e||this.downloadActiveFile(),!0):!1}}),this.addCommand({id:"sync-list-cloud-files",name:"Sync: List files in cloud",callback:()=>{this.listCloudFiles()}}),this.addCommand({id:"sync-connect-websocket",name:"Sync: Connect to real-time sync",callback:()=>{this.connectWebSocket()}}),this.addCommand({id:"sync-disconnect-websocket",name:"Sync: Disconnect from real-time sync",callback:()=>{this.disconnectWebSocket()}}),this.addCommand({id:"sync-toggle-file-watching",name:"Sync: Toggle automatic file watching",callback:()=>{this.toggleFileWatching()}}),this.addSettingTab(new r(this.app,this))}onunload(){this.disconnectWebSocket(),this.statusBarItem&&this.statusBarItem.detach(),this.reconnectTimeout&&clearTimeout(this.reconnectTimeout)}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}updateStatusBar(e,t="disconnected"){let n={connected:"#22c55e",disconnected:"#ef4444",syncing:"#3b82f6",error:"#f59e0b"};this.statusBarItem.setText(`\u{1F504} ${e}`),this.statusBarItem.style.setProperty("color",n[t])}validateWebSocketSettings(){return this.settings.websocketUrl?!0:(new s.Notice("Please configure WebSocket URL in settings"),!1)}connectWebSocket(){if(this.validateWebSocketSettings()){if(this.ws&&this.ws.readyState===WebSocket.OPEN){new s.Notice("Already connected to real-time sync");return}if(this.isConnecting){new s.Notice("Already attempting to connect...");return}this.isConnecting=!0,this.updateStatusBar("Connecting...","syncing");try{this.ws=new WebSocket(this.settings.websocketUrl),this.ws.onopen=()=>{console.log("WebSocket connected"),this.isConnecting=!1,this.reconnectAttempts=0,this.updateStatusBar("Connected","connected"),new s.Notice("Connected to real-time sync"),this.sendWebSocketMessage({action:"ping"})},this.ws.onmessage=e=>{try{let t=JSON.parse(e.data);this.handleWebSocketMessage(t)}catch(t){console.error("Failed to parse WebSocket message:",t)}},this.ws.onclose=e=>{console.log("WebSocket closed:",e.code,e.reason),this.isConnecting=!1,this.ws=null,this.updateStatusBar("Disconnected","disconnected"),e.code!==1e3&&this.reconnectAttempts<this.maxReconnectAttempts&&this.scheduleReconnect()},this.ws.onerror=e=>{console.error("WebSocket error:",e),this.isConnecting=!1,this.updateStatusBar("Connection Error","error")}}catch(e){console.error("Failed to create WebSocket:",e),this.isConnecting=!1,this.updateStatusBar("Connection Failed","error"),new s.Notice("Failed to connect to real-time sync")}}}disconnectWebSocket(){this.reconnectTimeout&&(clearTimeout(this.reconnectTimeout),this.reconnectTimeout=null),this.ws&&(this.ws.close(1e3,"Manual disconnect"),this.ws=null),this.updateStatusBar("Disconnected","disconnected"),new s.Notice("Disconnected from real-time sync")}scheduleReconnect(){this.reconnectAttempts++;let e=Math.min(1e3*Math.pow(2,this.reconnectAttempts),3e4);console.log(`Scheduling reconnect attempt ${this.reconnectAttempts} in ${e}ms`),this.updateStatusBar(`Reconnecting in ${Math.ceil(e/1e3)}s...`,"syncing"),this.reconnectTimeout=setTimeout(()=>{this.connectWebSocket()},e)}sendWebSocketMessage(e){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)return new s.Notice("Not connected to real-time sync"),!1;try{return this.ws.send(JSON.stringify(e)),!0}catch(t){return console.error("Failed to send WebSocket message:",t),new s.Notice("Failed to send message"),!1}}handleWebSocketMessage(e){switch(console.log("Received WebSocket message:",e),e.type){case"pong":console.log("Pong received");break;case"upload_success":new s.Notice(`File uploaded: ${e.filePath}`);break;case"download_success":e.filePath&&e.content!==void 0&&this.applyFileContent(e.filePath,e.content);break;case"file_list":e.files&&this.displayFileList(e.files);break;case"file_changed":e.filePath&&e.action==="upload"&&new s.Notice(`File updated by another client: ${e.filePath}`);break;case"error":new s.Notice(`Sync error: ${e.message}`),console.error("WebSocket error:",e.message);break;default:console.log("Unknown message type:",e.type)}}async uploadActiveFile(){let e=this.app.workspace.getActiveFile();if(!e){new s.Notice("No active file");return}await this.uploadFile(e)}async uploadFile(e){if(!this.ws||this.ws.readyState!==WebSocket.OPEN){new s.Notice("Not connected to real-time sync");return}try{this.updateStatusBar("Uploading...","syncing");let t=await this.app.vault.read(e);this.lastModifiedTimes.set(e.path,e.stat.mtime),this.sendWebSocketMessage({action:"upload",filePath:e.path,content:t})&&console.log(`Uploading file: ${e.path}`)}catch(t){console.error("Upload error:",t),new s.Notice("Upload failed: "+t.message),this.updateStatusBar("Upload failed","error")}setTimeout(()=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&this.updateStatusBar("Connected","connected")},2e3)}async downloadActiveFile(){let e=this.app.workspace.getActiveFile();if(!e){new s.Notice("No active file");return}this.downloadFile(e.path)}downloadFile(e){if(!this.ws||this.ws.readyState!==WebSocket.OPEN){new s.Notice("Not connected to real-time sync");return}this.updateStatusBar("Downloading...","syncing"),this.sendWebSocketMessage({action:"download",filePath:e})&&console.log(`Downloading file: ${e}`),setTimeout(()=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&this.updateStatusBar("Connected","connected")},2e3)}async applyFileContent(e,t){try{this.fileWatchingEnabled=!1;let n=this.app.vault.getAbstractFileByPath(e);n instanceof s.TFile?(await this.app.vault.modify(n,t),this.lastModifiedTimes.set(e,n.stat.mtime)):await this.app.vault.create(e,t),new s.Notice(`Downloaded: ${e}`)}catch(n){console.error("Failed to apply file content:",n),new s.Notice("Failed to save downloaded file")}finally{setTimeout(()=>{this.fileWatchingEnabled=!0},1e3)}}listCloudFiles(){if(!this.ws||this.ws.readyState!==WebSocket.OPEN){new s.Notice("Not connected to real-time sync");return}this.updateStatusBar("Fetching file list...","syncing"),this.sendWebSocketMessage({action:"list"})&&console.log("Requesting file list"),setTimeout(()=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&this.updateStatusBar("Connected","connected")},2e3)}displayFileList(e){let t=Object.keys(e);if(t.length===0)new s.Notice("No files found in cloud");else{let n=t.map(o=>`${o} (v${e[o]})`).join(`
`);new s.Notice(`Cloud files:
${n}`)}}debounceFileSync(e){let t=this.lastModifiedTimes.get(e.path);if(t&&Math.abs(e.stat.mtime-t)<1e3)return;let n=this.debounceTimeouts.get(e.path);n&&clearTimeout(n);let o=setTimeout(()=>{this.uploadFile(e),this.debounceTimeouts.delete(e.path)},2e3);this.debounceTimeouts.set(e.path,o)}toggleFileWatching(){this.fileWatchingEnabled=!this.fileWatchingEnabled;let e=this.fileWatchingEnabled?"enabled":"disabled";new s.Notice(`Automatic file watching ${e}`),console.log(`File watching ${e}`)}},r=class extends s.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new s.Setting(e).setName("WebSocket URL").setDesc("The URL of your WebSocket endpoint").addText(n=>n.setPlaceholder("wss://your-lambda-url.amazonaws.com/").setValue(this.plugin.settings.websocketUrl).onChange(async o=>{this.plugin.settings.websocketUrl=o.trim(),await this.plugin.saveSettings()})),new s.Setting(e).setName("Username").setDesc("Your username for sync (currently for future use)").addText(n=>n.setPlaceholder("Enter your username").setValue(this.plugin.settings.username).onChange(async o=>{this.plugin.settings.username=o,await this.plugin.saveSettings()})),new s.Setting(e).setName("Password").setDesc("Your password for sync (currently for future use)").addText(n=>{n.setPlaceholder("Enter your password").setValue(this.plugin.settings.password).onChange(async o=>{this.plugin.settings.password=o,await this.plugin.saveSettings()}),n.inputEl.type="password"}),e.createEl("h3",{text:"Instructions"});let t=e.createEl("div");t.innerHTML=`
			<p>1. Enter your WebSocket URL above (get this from your SST deployment output)</p>
			<p>2. Use the Command Palette (Ctrl/Cmd+P) to access sync commands:</p>
			<ul>
				<li><strong>Sync: Upload active file to cloud</strong> - Upload the currently open file</li>
				<li><strong>Sync: Download active file from cloud</strong> - Download and replace the currently open file</li>
				<li><strong>Sync: List files in cloud</strong> - Show all files available in the cloud</li>
				<li><strong>Sync: Connect to real-time sync</strong> - Connect to the real-time sync service</li>
				<li><strong>Sync: Disconnect from real-time sync</strong> - Disconnect from the real-time sync service</li>
				<li><strong>Sync: Toggle automatic file watching</strong> - Toggle automatic file watching</li>
			</ul>
			<p>3. The status bar at the bottom shows the current sync status</p>
		`}};
