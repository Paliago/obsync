/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";var l=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.prototype.hasOwnProperty;var w=(n,a,t)=>a in n?l(n,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[a]=t;var m=(n,a)=>{for(var t in a)l(n,t,{get:a[t],enumerable:!0})},y=(n,a,t,e)=>{if(a&&typeof a=="object"||typeof a=="function")for(let s of f(a))!g.call(n,s)&&s!==t&&l(n,s,{get:()=>a[s],enumerable:!(e=h(a,s))||e.enumerable});return n};var S=n=>y(l({},"__esModule",{value:!0}),n);var r=(n,a,t)=>(w(n,typeof a!="symbol"?a+"":a,t),t);var U={};m(U,{default:()=>c});module.exports=S(U);var i=require("obsidian");var v={username:"",password:"",apiUrl:""},c=class extends i.Plugin{constructor(){super(...arguments);r(this,"settings");r(this,"statusBarItem")}async onload(){await this.loadSettings(),this.statusBarItem=this.addStatusBarItem(),this.updateStatusBar("Disconnected"),this.addCommand({id:"sync-upload-active-file",name:"Sync: Upload active file to cloud",checkCallback:t=>{let e=this.app.workspace.getActiveFile();return e&&e.extension==="md"?(t||this.uploadActiveFile(),!0):!1}}),this.addCommand({id:"sync-download-active-file",name:"Sync: Download active file from cloud",checkCallback:t=>{let e=this.app.workspace.getActiveFile();return e&&e.extension==="md"?(t||this.downloadActiveFile(),!0):!1}}),this.addCommand({id:"sync-list-cloud-files",name:"Sync: List files in cloud",callback:()=>{this.listCloudFiles()}}),this.addSettingTab(new d(this.app,this))}onunload(){var t;(t=this.statusBarItem)==null||t.remove()}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}updateStatusBar(t){this.statusBarItem.setText(`Sync: ${t}`)}validateSettings(){return this.settings.apiUrl?!0:(new i.Notice("Please configure API URL in settings"),!1)}async uploadActiveFile(){if(!this.validateSettings())return;let t=this.app.workspace.getActiveFile();if(!t){new i.Notice("No active file");return}try{this.updateStatusBar("Uploading...");let e=await this.app.vault.read(t),s=await fetch(this.settings.apiUrl,{method:"PUT",headers:{"Content-Type":"text/markdown"},body:JSON.stringify({filePath:t.path,content:e})});if(s.ok)new i.Notice(`Successfully uploaded: ${t.name}`),this.updateStatusBar("Upload complete");else throw new Error(`Upload failed: ${s.status}`)}catch(e){console.error("Upload error:",e),new i.Notice("Upload failed: "+e.message),this.updateStatusBar("Upload failed")}setTimeout(()=>this.updateStatusBar("Connected"),3e3)}async downloadActiveFile(){if(!this.validateSettings())return;let t=this.app.workspace.getActiveFile();if(!t){new i.Notice("No active file");return}try{this.updateStatusBar("Downloading...");let e=this.settings.apiUrl.endsWith("/")?this.settings.apiUrl.slice(0,-1):this.settings.apiUrl,s=await fetch(`${e}/${t.path}`);if(s.ok){let o=await s.text();await this.app.vault.modify(t,o),new i.Notice(`Successfully downloaded: ${t.name}`),this.updateStatusBar("Download complete")}else if(s.status===404)new i.Notice("File not found in cloud"),this.updateStatusBar("File not found");else throw new Error(`Download failed: ${s.status}`)}catch(e){console.error("Download error:",e),new i.Notice("Download failed: "+e.message),this.updateStatusBar("Download failed")}setTimeout(()=>this.updateStatusBar("Connected"),3e3)}async listCloudFiles(){if(this.validateSettings()){try{this.updateStatusBar("Fetching file list...");let t=this.settings.apiUrl.endsWith("/")?this.settings.apiUrl.slice(0,-1):this.settings.apiUrl,e=await fetch(`${t}/versions`);if(e.ok){let s=await e.json(),o=Object.keys(s);if(o.length===0)new i.Notice("No files found in cloud");else{let p=o.map(u=>`${u} (v${s[u]})`).join(`
`);new i.Notice(`Cloud files:
${p}`)}this.updateStatusBar("File list retrieved")}else throw new Error(`Failed to fetch file list: ${e.status}`)}catch(t){console.error("List files error:",t),new i.Notice("Failed to fetch file list: "+t.message),this.updateStatusBar("List failed")}setTimeout(()=>this.updateStatusBar("Connected"),3e3)}}},d=class extends i.PluginSettingTab{constructor(t,e){super(t,e);r(this,"plugin");this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new i.Setting(t).setName("API URL").setDesc("The URL of your sync API endpoint").addText(s=>s.setPlaceholder("https://your-lambda-url.amazonaws.com/").setValue(this.plugin.settings.apiUrl).onChange(async o=>{this.plugin.settings.apiUrl=o.trim(),await this.plugin.saveSettings()})),new i.Setting(t).setName("Username").setDesc("Your username for sync (currently for future use)").addText(s=>s.setPlaceholder("Enter your username").setValue(this.plugin.settings.username).onChange(async o=>{this.plugin.settings.username=o,await this.plugin.saveSettings()})),new i.Setting(t).setName("Password").setDesc("Your password for sync (currently for future use)").addText(s=>{s.setPlaceholder("Enter your password").setValue(this.plugin.settings.password).onChange(async o=>{this.plugin.settings.password=o,await this.plugin.saveSettings()}),s.inputEl.type="password"}),t.createEl("h3",{text:"Instructions"});let e=t.createEl("div");e.innerHTML=`
			<p>1. Enter your API URL above (get this from your SST deployment output)</p>
			<p>2. Use the Command Palette (Ctrl/Cmd+P) to access sync commands:</p>
			<ul>
				<li><strong>Sync: Upload active file to cloud</strong> - Upload the currently open file</li>
				<li><strong>Sync: Download active file from cloud</strong> - Download and replace the currently open file</li>
				<li><strong>Sync: List files in cloud</strong> - Show all files available in the cloud</li>
			</ul>
			<p>3. The status bar at the bottom shows the current sync status</p>
		`}};
